// Code generated by go-swagger; DO NOT EDIT.

package main

import (
	"log"
	"os"

	"example.com/seminar02/generate/go-swagger/restapi/api/open"
	"example.com/seminar02/generate/go-swagger/restapi/api/secure"
	"github.com/go-openapi/loads"
	flags "github.com/jessevdk/go-flags"

	"example.com/seminar02/generate/go-swagger/restapi"
	swaggerapi "example.com/seminar02/generate/go-swagger/restapi/api"
)

// This file was generated by the swagger tool.
// Make sure not to overwrite this file after you generated it because all your edits would be lost!

func main() {

	swaggerSpec, err := loads.Embedded(restapi.SwaggerJSON, restapi.FlatSwaggerJSON)
	if err != nil {
		log.Fatalln(err)
	}

	api := swaggerapi.NewSubscriptionAPIAPI(swaggerSpec)

	api.OpenHealthCheckHandler = open.HealthCheckHandlerFunc(func(p open.HealthCheckParams) open.HealthCheckResponder {
		return open.NewHealthCheckDefault(200)
	})
	api.OpenSubscribeMailingHandler = open.SubscribeMailingHandlerFunc(func(p open.SubscribeMailingParams) open.SubscribeMailingResponder {
		// subscribe logic
		return open.NewSubscribeMailingDefault(200)
	})

	api.SecureAuthCheckHandler = secure.AuthCheckHandlerFunc(func(p secure.AuthCheckParams, i interface{}) secure.AuthCheckResponder {
		// get auth params from interface
		return secure.NewAuthCheckDefault(200)
	})

	server := restapi.NewServer(api)
	defer server.Shutdown()

	// add port
	server.Port = 8080

	parser := flags.NewParser(server, flags.Default)
	parser.ShortDescription = "Subscription API"
	parser.LongDescription = "Subscription API"
	server.ConfigureFlags()
	for _, optsGroup := range api.CommandLineOptionsGroups {
		_, err := parser.AddGroup(optsGroup.ShortDescription, optsGroup.LongDescription, optsGroup.Options)
		if err != nil {
			log.Fatalln(err)
		}
	}

	if _, err := parser.Parse(); err != nil {
		code := 1
		if fe, ok := err.(*flags.Error); ok {
			if fe.Type == flags.ErrHelp {
				code = 0
			}
		}
		os.Exit(code)
	}

	server.ConfigureAPI()
	server.EnabledListeners = []string{"http"}

	if err := server.Serve(); err != nil {
		log.Fatalln(err)
	}

}
