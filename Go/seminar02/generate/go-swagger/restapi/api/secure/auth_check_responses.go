// Code generated by go-swagger; DO NOT EDIT.

package secure

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"

	"example.com/seminar02/generate/go-swagger/model"
)

/*
AuthCheckDefault universal response is used for NoContent and AnyError answers, contains field Status as any data answers

swagger:response authCheckDefault
*/
type AuthCheckDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *model.EmptyResponse `json:"body,omitempty"`
}

// NewAuthCheckDefault creates AuthCheckDefault with default headers values
func NewAuthCheckDefault(code int) *AuthCheckDefault {
	if code <= 0 {
		code = 500
	}

	return &AuthCheckDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the auth check default response
func (o *AuthCheckDefault) WithStatusCode(code int) *AuthCheckDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the auth check default response
func (o *AuthCheckDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the auth check default response
func (o *AuthCheckDefault) WithPayload(payload *model.EmptyResponse) *AuthCheckDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the auth check default response
func (o *AuthCheckDefault) SetPayload(payload *model.EmptyResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AuthCheckDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

func (o *AuthCheckDefault) AuthCheckResponder() {}

type AuthCheckNotImplementedResponder struct {
	middleware.Responder
}

func (*AuthCheckNotImplementedResponder) AuthCheckResponder() {}

func AuthCheckNotImplemented() AuthCheckResponder {
	return &AuthCheckNotImplementedResponder{
		middleware.NotImplemented(
			"operation authentication.AuthCheck has not yet been implemented",
		),
	}
}

type AuthCheckResponder interface {
	middleware.Responder
	AuthCheckResponder()
}
