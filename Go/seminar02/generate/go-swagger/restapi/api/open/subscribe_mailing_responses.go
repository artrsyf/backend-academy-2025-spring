// Code generated by go-swagger; DO NOT EDIT.

package open

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"

	"example.com/seminar02/generate/go-swagger/model"
)

/*
SubscribeMailingDefault subscribe mailing default

swagger:response subscribeMailingDefault
*/
type SubscribeMailingDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload model.BaseResponse `json:"body,omitempty"`
}

// NewSubscribeMailingDefault creates SubscribeMailingDefault with default headers values
func NewSubscribeMailingDefault(code int) *SubscribeMailingDefault {
	if code <= 0 {
		code = 500
	}

	return &SubscribeMailingDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the subscribe mailing default response
func (o *SubscribeMailingDefault) WithStatusCode(code int) *SubscribeMailingDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the subscribe mailing default response
func (o *SubscribeMailingDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the subscribe mailing default response
func (o *SubscribeMailingDefault) WithPayload(payload model.BaseResponse) *SubscribeMailingDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the subscribe mailing default response
func (o *SubscribeMailingDefault) SetPayload(payload model.BaseResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SubscribeMailingDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

func (o *SubscribeMailingDefault) SubscribeMailingResponder() {}

type SubscribeMailingNotImplementedResponder struct {
	middleware.Responder
}

func (*SubscribeMailingNotImplementedResponder) SubscribeMailingResponder() {}

func SubscribeMailingNotImplemented() SubscribeMailingResponder {
	return &SubscribeMailingNotImplementedResponder{
		middleware.NotImplemented(
			"operation authentication.SubscribeMailing has not yet been implemented",
		),
	}
}

type SubscribeMailingResponder interface {
	middleware.Responder
	SubscribeMailingResponder()
}
