// Code generated by go-swagger; DO NOT EDIT.

package open

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// SubscribeMailingHandlerFunc turns a function with the right signature into a subscribe mailing handler
type SubscribeMailingHandlerFunc func(SubscribeMailingParams) SubscribeMailingResponder

// Handle executing the request and returning a response
func (fn SubscribeMailingHandlerFunc) Handle(params SubscribeMailingParams) SubscribeMailingResponder {
	return fn(params)
}

// SubscribeMailingHandler interface for that can handle valid subscribe mailing params
type SubscribeMailingHandler interface {
	Handle(SubscribeMailingParams) SubscribeMailingResponder
}

// NewSubscribeMailing creates a new http.Handler for the subscribe mailing operation
func NewSubscribeMailing(ctx *middleware.Context, handler SubscribeMailingHandler) *SubscribeMailing {
	return &SubscribeMailing{Context: ctx, Handler: handler}
}

/*
	SubscribeMailing swagger:route POST /subscribe open subscribeMailing

request subscribe to mailing list
*/
type SubscribeMailing struct {
	Context *middleware.Context
	Handler SubscribeMailingHandler
}

func (o *SubscribeMailing) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewSubscribeMailingParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
