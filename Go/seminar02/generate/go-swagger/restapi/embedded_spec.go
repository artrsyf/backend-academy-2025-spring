// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Subscription API",
    "title": "Subscription API",
    "version": "0.0.1"
  },
  "basePath": "/subscribe/v1",
  "paths": {
    "/auth-check": {
      "$ref": "./methods/health_check.yml#/auth_check"
    },
    "/health-check": {
      "$ref": "./methods/health_check.yml#/health_check"
    },
    "/subscribe": {
      "$ref": "methods/mailing.yml#/email_subscribe"
    }
  },
  "securityDefinitions": {
    "ApiKeyAuth": {
      "type": "apiKey",
      "name": "X-Auth-Token",
      "in": "header"
    }
  },
  "tags": [
    {
      "description": "open methods",
      "name": "open"
    },
    {
      "description": "authorized user methods",
      "name": "secure"
    }
  ]
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Subscription API",
    "title": "Subscription API",
    "version": "0.0.1"
  },
  "basePath": "/subscribe/v1",
  "paths": {
    "/auth-check": {
      "get": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "check service work correctly",
        "tags": [
          "secure"
        ],
        "operationId": "authCheck",
        "responses": {
          "default": {
            "description": "universal response is used for NoContent and AnyError answers, contains field Status as any data answers",
            "schema": {
              "$ref": "#/definitions/emptyResponse"
            }
          }
        }
      }
    },
    "/health-check": {
      "get": {
        "security": [],
        "description": "check service work correctly",
        "tags": [
          "open"
        ],
        "operationId": "healthCheck",
        "responses": {
          "default": {
            "description": "universal response is used for NoContent and AnyError answers, contains field Status as any data answers",
            "schema": {
              "$ref": "#/definitions/emptyResponse"
            }
          }
        }
      }
    },
    "/subscribe": {
      "post": {
        "security": [],
        "description": "request subscribe to mailing list",
        "tags": [
          "open"
        ],
        "operationId": "subscribeMailing",
        "parameters": [
          {
            "type": "string",
            "format": "email",
            "name": "email",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "name": "name",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/baseResponse"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "baseResponse": {
      "description": "universal response is used for NoContent and AnyError answers, contains field Status as any data answers",
      "schema": {
        "$ref": "common.yml#/components/schemas/EmptyResponse"
      }
    },
    "emptyResponse": {
      "type": "object",
      "required": [
        "status"
      ],
      "properties": {
        "status": {
          "$ref": "#/definitions/status"
        }
      }
    },
    "status": {
      "type": "object",
      "required": [
        "code",
        "message",
        "msgId"
      ],
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "msgId": {
          "type": "string"
        }
      }
    }
  },
  "securityDefinitions": {
    "ApiKeyAuth": {
      "type": "apiKey",
      "name": "X-Auth-Token",
      "in": "header"
    }
  },
  "tags": [
    {
      "description": "open methods",
      "name": "open"
    },
    {
      "description": "authorized user methods",
      "name": "secure"
    }
  ]
}`))
}
