// Code generated by ogen, DO NOT EDIT.

package api

import (
	"time"

	"github.com/google/uuid"
)

// Ref: #/components/schemas/DefaultError
type DefaultError struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
}

// GetCode returns the value of Code.
func (s *DefaultError) GetCode() int {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *DefaultError) GetMessage() string {
	return s.Message
}

// SetCode sets the value of Code.
func (s *DefaultError) SetCode(val int) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *DefaultError) SetMessage(val string) {
	s.Message = val
}

// DefaultErrorStatusCode wraps DefaultError with StatusCode.
type DefaultErrorStatusCode struct {
	StatusCode int
	Response   DefaultError
}

// GetStatusCode returns the value of StatusCode.
func (s *DefaultErrorStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *DefaultErrorStatusCode) GetResponse() DefaultError {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *DefaultErrorStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *DefaultErrorStatusCode) SetResponse(val DefaultError) {
	s.Response = val
}

func (*DefaultErrorStatusCode) tasksPostRes() {}

// NewOptBool returns new OptBool with value set to v.
func NewOptBool(v bool) OptBool {
	return OptBool{
		Value: v,
		Set:   true,
	}
}

// OptBool is optional bool.
type OptBool struct {
	Value bool
	Set   bool
}

// IsSet returns true if OptBool was set.
func (o OptBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBool) SetTo(v bool) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBool) Get() (v bool, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDateTime returns new OptDateTime with value set to v.
func NewOptDateTime(v time.Time) OptDateTime {
	return OptDateTime{
		Value: v,
		Set:   true,
	}
}

// OptDateTime is optional time.Time.
type OptDateTime struct {
	Value time.Time
	Set   bool
}

// IsSet returns true if OptDateTime was set.
func (o OptDateTime) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDateTime) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDateTime) SetTo(v time.Time) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDateTime) Get() (v time.Time, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDateTime) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUUID returns new OptUUID with value set to v.
func NewOptUUID(v uuid.UUID) OptUUID {
	return OptUUID{
		Value: v,
		Set:   true,
	}
}

// OptUUID is optional uuid.UUID.
type OptUUID struct {
	Value uuid.UUID
	Set   bool
}

// IsSet returns true if OptUUID was set.
func (o OptUUID) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUUID) Reset() {
	var v uuid.UUID
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUUID) SetTo(v uuid.UUID) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUUID) Get() (v uuid.UUID, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUUID) Or(d uuid.UUID) uuid.UUID {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/schemas/Task
type Task struct {
	// Уникальный идентификатор задачи.
	ID OptUUID `json:"id"`
	// Заголовок задачи.
	Title OptString `json:"title"`
	// Подробное описание задачи.
	Description OptString `json:"description"`
	// Статус выполнения задачи.
	Completed OptBool `json:"completed"`
	// Дата и время создания задачи.
	CreatedAt OptDateTime `json:"createdAt"`
	// Дата и время последнего обновления задачи.
	UpdatedAt OptDateTime `json:"updatedAt"`
}

// GetID returns the value of ID.
func (s *Task) GetID() OptUUID {
	return s.ID
}

// GetTitle returns the value of Title.
func (s *Task) GetTitle() OptString {
	return s.Title
}

// GetDescription returns the value of Description.
func (s *Task) GetDescription() OptString {
	return s.Description
}

// GetCompleted returns the value of Completed.
func (s *Task) GetCompleted() OptBool {
	return s.Completed
}

// GetCreatedAt returns the value of CreatedAt.
func (s *Task) GetCreatedAt() OptDateTime {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *Task) GetUpdatedAt() OptDateTime {
	return s.UpdatedAt
}

// SetID sets the value of ID.
func (s *Task) SetID(val OptUUID) {
	s.ID = val
}

// SetTitle sets the value of Title.
func (s *Task) SetTitle(val OptString) {
	s.Title = val
}

// SetDescription sets the value of Description.
func (s *Task) SetDescription(val OptString) {
	s.Description = val
}

// SetCompleted sets the value of Completed.
func (s *Task) SetCompleted(val OptBool) {
	s.Completed = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *Task) SetCreatedAt(val OptDateTime) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *Task) SetUpdatedAt(val OptDateTime) {
	s.UpdatedAt = val
}

func (*Task) tasksPostRes()      {}
func (*Task) tasksTaskIdGetRes() {}
func (*Task) tasksTaskIdPutRes() {}

// Ref: #/components/schemas/TaskInput
type TaskInput struct {
	// Заголовок задачи.
	Title string `json:"title"`
	// Подробное описание задачи.
	Description OptString `json:"description"`
	// Статус выполнения задачи (по умолчанию false).
	Completed OptBool `json:"completed"`
}

// GetTitle returns the value of Title.
func (s *TaskInput) GetTitle() string {
	return s.Title
}

// GetDescription returns the value of Description.
func (s *TaskInput) GetDescription() OptString {
	return s.Description
}

// GetCompleted returns the value of Completed.
func (s *TaskInput) GetCompleted() OptBool {
	return s.Completed
}

// SetTitle sets the value of Title.
func (s *TaskInput) SetTitle(val string) {
	s.Title = val
}

// SetDescription sets the value of Description.
func (s *TaskInput) SetDescription(val OptString) {
	s.Description = val
}

// SetCompleted sets the value of Completed.
func (s *TaskInput) SetCompleted(val OptBool) {
	s.Completed = val
}

// TasksTaskIdDeleteNoContent is response for TasksTaskIdDelete operation.
type TasksTaskIdDeleteNoContent struct{}

func (*TasksTaskIdDeleteNoContent) tasksTaskIdDeleteRes() {}

// TasksTaskIdDeleteNotFound is response for TasksTaskIdDelete operation.
type TasksTaskIdDeleteNotFound struct{}

func (*TasksTaskIdDeleteNotFound) tasksTaskIdDeleteRes() {}

// TasksTaskIdGetNotFound is response for TasksTaskIdGet operation.
type TasksTaskIdGetNotFound struct{}

func (*TasksTaskIdGetNotFound) tasksTaskIdGetRes() {}

// TasksTaskIdPutNotFound is response for TasksTaskIdPut operation.
type TasksTaskIdPutNotFound struct{}

func (*TasksTaskIdPutNotFound) tasksTaskIdPutRes() {}
