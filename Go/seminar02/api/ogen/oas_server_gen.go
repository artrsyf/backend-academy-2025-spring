// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// TasksGet implements GET /tasks operation.
	//
	// Получить список всех задач.
	//
	// GET /tasks
	TasksGet(ctx context.Context) ([]Task, error)
	// TasksPost implements POST /tasks operation.
	//
	// Создать новую задачу.
	//
	// POST /tasks
	TasksPost(ctx context.Context, req *TaskInput) (TasksPostRes, error)
	// TasksTaskIdDelete implements DELETE /tasks/{taskId} operation.
	//
	// Удалить задачу.
	//
	// DELETE /tasks/{taskId}
	TasksTaskIdDelete(ctx context.Context, params TasksTaskIdDeleteParams) (TasksTaskIdDeleteRes, error)
	// TasksTaskIdGet implements GET /tasks/{taskId} operation.
	//
	// Получить задачу по ID.
	//
	// GET /tasks/{taskId}
	TasksTaskIdGet(ctx context.Context, params TasksTaskIdGetParams) (TasksTaskIdGetRes, error)
	// TasksTaskIdPut implements PUT /tasks/{taskId} operation.
	//
	// Обновить существующую задачу.
	//
	// PUT /tasks/{taskId}
	TasksTaskIdPut(ctx context.Context, req *TaskInput, params TasksTaskIdPutParams) (TasksTaskIdPutRes, error)
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h Handler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		baseServer: s,
	}, nil
}
