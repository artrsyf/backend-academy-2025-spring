/**
 * Autogenerated by Avro
 * <p>
 * DO NOT EDIT DIRECTLY
 */

package backend.academy.kafka.model.generated;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;


@org.apache.avro.specific.AvroGenerated
public class UserEvent extends org.apache.avro.specific.SpecificRecordBase
    implements org.apache.avro.specific.SpecificRecord {

    private static final long serialVersionUID = 6726264642077623002L;

    public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse(
        "{\"type\":\"record\",\"name\":\"UserEvent\",\"namespace\":\"backend.academy.kafka.model.generated\","
            + "\"fields\":[{\"name\":\"id\",\"type\":\"long\"},{\"name\":\"userId\",\"type\":\"long\"},"
            + "{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},"
            + "{\"name\":\"eventType\",\"type\":{\"type\":\"enum\",\"name\":\"UserEventType\","
            + "\"symbols\":[\"WITHDRAWAL\",\"ACCRUAL\"]}}]}");

    public static org.apache.avro.Schema getClassSchema() {
        return SCHEMA$;
    }

    private static final SpecificData MODEL$ = new SpecificData();

    static {
        MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
    }

    private static final BinaryMessageEncoder<UserEvent> ENCODER =
        new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

    private static final BinaryMessageDecoder<UserEvent> DECODER =
        new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

    /**
     * Return the BinaryMessageEncoder instance used by this class.
     * @return the message encoder used by this class
     */
    public static BinaryMessageEncoder<UserEvent> getEncoder() {
        return ENCODER;
    }

    /**
     * Return the BinaryMessageDecoder instance used by this class.
     * @return the message decoder used by this class
     */
    public static BinaryMessageDecoder<UserEvent> getDecoder() {
        return DECODER;
    }

    /**
     * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
     * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
     * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
     */
    public static BinaryMessageDecoder<UserEvent> createDecoder(SchemaStore resolver) {
        return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
    }

    /**
     * Serializes this UserEvent to a ByteBuffer.
     * @return a buffer holding the serialized data for this instance
     * @throws java.io.IOException if this instance could not be serialized
     */
    public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
        return ENCODER.encode(this);
    }

    /**
     * Deserializes a UserEvent from a ByteBuffer.
     * @param b a byte buffer holding serialized data for an instance of this class
     * @return a UserEvent instance decoded from the given buffer
     * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
     */
    public static UserEvent fromByteBuffer(
        java.nio.ByteBuffer b
    ) throws java.io.IOException {
        return DECODER.decode(b);
    }

    private long id;
    private long userId;
    private java.time.Instant createdAt;
    private backend.academy.kafka.model.generated.UserEventType eventType;

    /**
     * Default constructor.  Note that this does not initialize fields
     * to their default values from the schema.  If that is desired then
     * one should use <code>newBuilder()</code>.
     */
    public UserEvent() {
    }

    /**
     * All-args constructor.
     * @param id The new value for id
     * @param userId The new value for userId
     * @param createdAt The new value for createdAt
     * @param eventType The new value for eventType
     */
    public UserEvent(
        java.lang.Long id,
        java.lang.Long userId,
        java.time.Instant createdAt,
        backend.academy.kafka.model.generated.UserEventType eventType
    ) {
        this.id = id;
        this.userId = userId;
        this.createdAt = createdAt.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
        this.eventType = eventType;
    }

    @Override
    public org.apache.avro.specific.SpecificData getSpecificData() {
        return MODEL$;
    }

    @Override
    public org.apache.avro.Schema getSchema() {
        return SCHEMA$;
    }

    // Used by DatumWriter.  Applications should not call.
    @Override
    public java.lang.Object get(int field$) {
        switch (field$) {
            case 0:
                return id;
            case 1:
                return userId;
            case 2:
                return createdAt;
            case 3:
                return eventType;
            default:
                throw new IndexOutOfBoundsException("Invalid index: " + field$);
        }
    }

    private static final org.apache.avro.Conversion<?>[] conversions =
        new org.apache.avro.Conversion<?>[] {
            null,
            null,
            new org.apache.avro.data.TimeConversions.TimestampMillisConversion(),
            null,
            null
        };

    @Override
    public org.apache.avro.Conversion<?> getConversion(int field) {
        return conversions[field];
    }

    // Used by DatumReader.  Applications should not call.
    @Override
    @SuppressWarnings(value = "unchecked")
    public void put(int field$, java.lang.Object value$) {
        switch (field$) {
            case 0:
                id = (java.lang.Long) value$;
                break;
            case 1:
                userId = (java.lang.Long) value$;
                break;
            case 2:
                createdAt = (java.time.Instant) value$;
                break;
            case 3:
                eventType = (backend.academy.kafka.model.generated.UserEventType) value$;
                break;
            default:
                throw new IndexOutOfBoundsException("Invalid index: " + field$);
        }
    }

    /**
     * Gets the value of the 'id' field.
     * @return The value of the 'id' field.
     */
    public long getId() {
        return id;
    }

    /**
     * Sets the value of the 'id' field.
     * @param value the value to set.
     */
    public void setId(long value) {
        this.id = value;
    }

    /**
     * Gets the value of the 'userId' field.
     * @return The value of the 'userId' field.
     */
    public long getUserId() {
        return userId;
    }

    /**
     * Sets the value of the 'userId' field.
     * @param value the value to set.
     */
    public void setUserId(long value) {
        this.userId = value;
    }

    /**
     * Gets the value of the 'createdAt' field.
     * @return The value of the 'createdAt' field.
     */
    public java.time.Instant getCreatedAt() {
        return createdAt;
    }

    /**
     * Sets the value of the 'createdAt' field.
     * @param value the value to set.
     */
    public void setCreatedAt(java.time.Instant value) {
        this.createdAt = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
    }

    /**
     * Gets the value of the 'eventType' field.
     * @return The value of the 'eventType' field.
     */
    public backend.academy.kafka.model.generated.UserEventType getEventType() {
        return eventType;
    }

    /**
     * Sets the value of the 'eventType' field.
     * @param value the value to set.
     */
    public void setEventType(backend.academy.kafka.model.generated.UserEventType value) {
        this.eventType = value;
    }

    /**
     * Creates a new UserEvent RecordBuilder.
     * @return A new UserEvent RecordBuilder
     */
    public static backend.academy.kafka.model.generated.UserEvent.Builder newBuilder() {
        return new backend.academy.kafka.model.generated.UserEvent.Builder();
    }

    /**
     * Creates a new UserEvent RecordBuilder by copying an existing Builder.
     * @param other The existing builder to copy.
     * @return A new UserEvent RecordBuilder
     */
    public static backend.academy.kafka.model.generated.UserEvent.Builder newBuilder(backend.academy.kafka.model.generated.UserEvent.Builder other) {
        if (other == null) {
            return new backend.academy.kafka.model.generated.UserEvent.Builder();
        } else {
            return new backend.academy.kafka.model.generated.UserEvent.Builder(other);
        }
    }

    /**
     * Creates a new UserEvent RecordBuilder by copying an existing UserEvent instance.
     * @param other The existing instance to copy.
     * @return A new UserEvent RecordBuilder
     */
    public static backend.academy.kafka.model.generated.UserEvent.Builder newBuilder(backend.academy.kafka.model.generated.UserEvent other) {
        if (other == null) {
            return new backend.academy.kafka.model.generated.UserEvent.Builder();
        } else {
            return new backend.academy.kafka.model.generated.UserEvent.Builder(other);
        }
    }

    /**
     * RecordBuilder for UserEvent instances.
     */
    @org.apache.avro.specific.AvroGenerated
    public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<UserEvent>
        implements org.apache.avro.data.RecordBuilder<UserEvent> {

        private long id;
        private long userId;
        private java.time.Instant createdAt;
        private backend.academy.kafka.model.generated.UserEventType eventType;

        /** Creates a new Builder */
        private Builder() {
            super(SCHEMA$, MODEL$);
        }

        /**
         * Creates a Builder by copying an existing Builder.
         * @param other The existing Builder to copy.
         */
        private Builder(backend.academy.kafka.model.generated.UserEvent.Builder other) {
            super(other);
            if (isValidValue(fields()[0], other.id)) {
                this.id = data().deepCopy(fields()[0].schema(), other.id);
                fieldSetFlags()[0] = other.fieldSetFlags()[0];
            }
            if (isValidValue(fields()[1], other.userId)) {
                this.userId = data().deepCopy(fields()[1].schema(), other.userId);
                fieldSetFlags()[1] = other.fieldSetFlags()[1];
            }
            if (isValidValue(fields()[2], other.createdAt)) {
                this.createdAt = data().deepCopy(fields()[2].schema(), other.createdAt);
                fieldSetFlags()[2] = other.fieldSetFlags()[2];
            }
            if (isValidValue(fields()[3], other.eventType)) {
                this.eventType = data().deepCopy(fields()[3].schema(), other.eventType);
                fieldSetFlags()[3] = other.fieldSetFlags()[3];
            }
        }

        /**
         * Creates a Builder by copying an existing UserEvent instance
         * @param other The existing instance to copy.
         */
        private Builder(backend.academy.kafka.model.generated.UserEvent other) {
            super(SCHEMA$, MODEL$);
            if (isValidValue(fields()[0], other.id)) {
                this.id = data().deepCopy(fields()[0].schema(), other.id);
                fieldSetFlags()[0] = true;
            }
            if (isValidValue(fields()[1], other.userId)) {
                this.userId = data().deepCopy(fields()[1].schema(), other.userId);
                fieldSetFlags()[1] = true;
            }
            if (isValidValue(fields()[2], other.createdAt)) {
                this.createdAt = data().deepCopy(fields()[2].schema(), other.createdAt);
                fieldSetFlags()[2] = true;
            }
            if (isValidValue(fields()[3], other.eventType)) {
                this.eventType = data().deepCopy(fields()[3].schema(), other.eventType);
                fieldSetFlags()[3] = true;
            }
        }

        /**
         * Gets the value of the 'id' field.
         * @return The value.
         */
        public long getId() {
            return id;
        }

        /**
         * Sets the value of the 'id' field.
         * @param value The value of 'id'.
         * @return This builder.
         */
        public backend.academy.kafka.model.generated.UserEvent.Builder setId(long value) {
            validate(fields()[0], value);
            this.id = value;
            fieldSetFlags()[0] = true;
            return this;
        }

        /**
         * Checks whether the 'id' field has been set.
         * @return True if the 'id' field has been set, false otherwise.
         */
        public boolean hasId() {
            return fieldSetFlags()[0];
        }

        /**
         * Clears the value of the 'id' field.
         * @return This builder.
         */
        public backend.academy.kafka.model.generated.UserEvent.Builder clearId() {
            fieldSetFlags()[0] = false;
            return this;
        }

        /**
         * Gets the value of the 'userId' field.
         * @return The value.
         */
        public long getUserId() {
            return userId;
        }

        /**
         * Sets the value of the 'userId' field.
         * @param value The value of 'userId'.
         * @return This builder.
         */
        public backend.academy.kafka.model.generated.UserEvent.Builder setUserId(long value) {
            validate(fields()[1], value);
            this.userId = value;
            fieldSetFlags()[1] = true;
            return this;
        }

        /**
         * Checks whether the 'userId' field has been set.
         * @return True if the 'userId' field has been set, false otherwise.
         */
        public boolean hasUserId() {
            return fieldSetFlags()[1];
        }

        /**
         * Clears the value of the 'userId' field.
         * @return This builder.
         */
        public backend.academy.kafka.model.generated.UserEvent.Builder clearUserId() {
            fieldSetFlags()[1] = false;
            return this;
        }

        /**
         * Gets the value of the 'createdAt' field.
         * @return The value.
         */
        public java.time.Instant getCreatedAt() {
            return createdAt;
        }

        /**
         * Sets the value of the 'createdAt' field.
         * @param value The value of 'createdAt'.
         * @return This builder.
         */
        public backend.academy.kafka.model.generated.UserEvent.Builder setCreatedAt(java.time.Instant value) {
            validate(fields()[2], value);
            this.createdAt = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
            fieldSetFlags()[2] = true;
            return this;
        }

        /**
         * Checks whether the 'createdAt' field has been set.
         * @return True if the 'createdAt' field has been set, false otherwise.
         */
        public boolean hasCreatedAt() {
            return fieldSetFlags()[2];
        }

        /**
         * Clears the value of the 'createdAt' field.
         * @return This builder.
         */
        public backend.academy.kafka.model.generated.UserEvent.Builder clearCreatedAt() {
            fieldSetFlags()[2] = false;
            return this;
        }

        /**
         * Gets the value of the 'eventType' field.
         * @return The value.
         */
        public backend.academy.kafka.model.generated.UserEventType getEventType() {
            return eventType;
        }

        /**
         * Sets the value of the 'eventType' field.
         * @param value The value of 'eventType'.
         * @return This builder.
         */
        public backend.academy.kafka.model.generated.UserEvent.Builder setEventType(backend.academy.kafka.model.generated.UserEventType value) {
            validate(fields()[3], value);
            this.eventType = value;
            fieldSetFlags()[3] = true;
            return this;
        }

        /**
         * Checks whether the 'eventType' field has been set.
         * @return True if the 'eventType' field has been set, false otherwise.
         */
        public boolean hasEventType() {
            return fieldSetFlags()[3];
        }

        /**
         * Clears the value of the 'eventType' field.
         * @return This builder.
         */
        public backend.academy.kafka.model.generated.UserEvent.Builder clearEventType() {
            eventType = null;
            fieldSetFlags()[3] = false;
            return this;
        }

        @Override
        @SuppressWarnings("unchecked")
        public UserEvent build() {
            try {
                UserEvent record = new UserEvent();
                record.id = fieldSetFlags()[0] ? this.id : (java.lang.Long) defaultValue(fields()[0]);
                record.userId = fieldSetFlags()[1] ? this.userId : (java.lang.Long) defaultValue(fields()[1]);
                record.createdAt = fieldSetFlags()[2] ? this.createdAt : (java.time.Instant) defaultValue(fields()[2]);
                record.eventType = fieldSetFlags()[3] ? this.eventType
                    : (backend.academy.kafka.model.generated.UserEventType) defaultValue(fields()[3]);
                return record;
            } catch (org.apache.avro.AvroMissingFieldException e) {
                throw e;
            } catch (java.lang.Exception e) {
                throw new org.apache.avro.AvroRuntimeException(e);
            }
        }

    }

    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumWriter<UserEvent>
        WRITER$ = (org.apache.avro.io.DatumWriter<UserEvent>) MODEL$.createDatumWriter(SCHEMA$);

    @Override public void writeExternal(java.io.ObjectOutput out)
        throws java.io.IOException {
        WRITER$.write(this, SpecificData.getEncoder(out));
    }

    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumReader<UserEvent>
        READER$ = (org.apache.avro.io.DatumReader<UserEvent>) MODEL$.createDatumReader(SCHEMA$);

    @Override public void readExternal(java.io.ObjectInput in)
        throws java.io.IOException {
        READER$.read(this, SpecificData.getDecoder(in));
    }

}










